}
logMap <- function(nper = 10, r = 1, x0 = 0.5, xbase = 0){
xval <- c(x0, logMapFn(x0, xbase, r))
for(i in 2:nper){
xval[i+1] <- logMapFn(xval[i], xval[i-1], r)
}
return(data.frame(t_per, xval))
}
logMap(10, r = 1.4, x0 = 4.22, xbase=0)
source('~/.active-rstudio-document', echo=TRUE)
x <- xval(nper=10, r = 1.1, x0 = 0.422, xbase = 0)
x <- logMap(nper=10, r = 1.1, x0 = 0.422, xbase = 0)
source('C:/Users/chris/Documents/GitHub/logisticMap/logMap.R', echo=TRUE)
x <- logMap(nper=10, r = 1.1, x0 = 0.422, xbase = 0)
length(xval)
t_per
t_per <- c(0:(1 - length(xval)))
t_per
t_per <- c(0:length(xval))
t_per
t_per <- c(0:nper)
t_per
length(t_per)
source('C:/Users/chris/Documents/GitHub/logisticMap/logMap.R', echo=TRUE)
x <- logMap(nper=10, r = 1.1, x0 = 0.422, xbase = 0)
x
library(magrittr)
library(ggplot2)
g <- ggplot(data = x, aes(x = t_per, y = xval))
g + geom_line()
g + geom_line() + scale_x_discrete(breaks=(0:10))
g + geom_line() + scale_x_discrete()
g + geom_line() + scale_x_discrete(breaks = c(0:10))
g + geom_line() + scale_x_discrete(breaks = c(1, 2, 3, 4, 5)
;
g + geom_line() + scale_x_discrete(breaks = c(1, 2, 3, 4, 5))
g + geom_line() + scale_x_discrete(breaks = c("1", "2", "3", "4", "5"))
g + geom_line()
g + geom_line() + scale_x_discrete(limit = c(0:10))
g + geom_line() + scale_x_discrete(limit = c(0:10)) + scale_y_continuous(minor_braeks = 0.05)
g + geom_line() + scale_x_discrete(limit = c(0:10)) + scale_y_continuous(minor_breaks = 0.05)
g + geom_line() + scale_x_discrete(limit = c(0:10)) + scale_y_continuous(minor_breaks = c(0.15, 0.25, 0.35)
)
g + geom_line() + scale_x_discrete(limit = c(0:10))
g + geom_line(col = "blue") + scale_x_discrete(limit = c(0:10)) + scale_y_continuous()
x <- logMap(nper=10, r = 1.1, x0 = 0.422, xbase = 0)
r
r - 1 / r
1.1 - 1/ 1.1
x
linearMap <- function(c = 4, lambda = 0.4, x){
return(c * lambda * x * (1-x))
}
rm(list=ls())
source('C:/Users/chris/Documents/GitHub/logisticMap/logMap.R', echo=TRUE)
?curve
curve(linearMap, from = 0, to = 1)
curve(linearMap(4, 0.4, x), from = 0, to = 1)
library(ggplot2)
ggplot(data.frame(x=c(0, 1)), aes(x)) +
stat_function(fun=linearMap(4, 0.4, x))
curve(linearMap(4, 0.4, x), from = 0, to = 1, xlim = c(0, 1))
curve(linearMap(4, 0.4, x), from = 0, to = 1, xaxs = i)
curve(linearMap(4, 0.4, x), from = 0, to = 1, xaxs = "i")
curve(linearMap(4, 0.4, x), from = 0, to = 1, xaxs = "i", yaxs="i")
curve(linearMap(4, 0.4, x), 0, 1, xaxs="i", yaxs="i")
curve(linearMap(4, 0.4, x), 0, 1, xaxs="i", yaxs="i", ylim = c(0, 0.5))
out = c()
iter = 10
out = c(linearMap(4, 0.4, 0))
for(i in 2:iter){
out[i] <- linearMap(4, 0.4, out[i-1])
}
out
linearMap(4, 0.4, 0.3)
linearMap(x = 0.1)
linearMap(x = 0.144)
(x, y) <- (1, 2)
x, y <- 1, 2
?out
c= 4
lambda = .4
x = 0.1
n = 10
out <- c(linearMap(c, lambda, x))
out
getLMap <- function(c = 4, lambda = 0.4, x = 0.1, n = 10){
out <- c(linearMap(c, lambda, x))
for(i in 2:n){
out[i] <- linearMap(c, lambda, x = out[i-1])
}
return(out)
}
getLMap(n = 10)
plot(out, type = "l")
plot(1:10, out, type = "l")
length(out)
out
out <- getLMap(n = 10)
plot(out, type = "l")
plot(getLMap(n = 10), type="l")
plot(getLMap(n = 10), type="l", xlab = "value")
plot(getLMap(n = 10), type="l", xaxs="i", yaxs="i")
plot(getLMap(n = 10), type="l", xaxs="i")
lambda_val <- seq(from = 0.2, to = 0.8, by = 0.05)
lambda_val
catch
x <- list()
x[1] <- c(1, 2, 3)
x
x[[1]] <- c(1,2,2)
x
x[[2]] <- "thing"
x
rm(x)
x <- list()
for(j in 1:length(lambda_vals)){
r_val = lambda_val[j]
x[[r_val]] <- getLMap(4, lambda_val[j], 0.1, 10)
}
for(j in 1:length(lambda_val)){
r_val = lambda_val[j]
x[[r_val]] <- getLMap(4, lambda_val[j], 0.1, 10)
}
for(j in 1:length(lambda_val)){
r_val = lambda_val[j]
x[[j]] <- getLMap(4, lambda_val[j], 0.1, 10)
}
r_val = as.character(lambda_val[j])
r_val
x <- list()
for(j in 1:length(lambda_val)){
r_val = as.character(lambda_val[j])
x[[j]] <- getLMap(4, lambda_val[j], 0.1, 10)
}
x
x <- list()
for(j in 1:length(lambda_val)){
r_val = as.character(lambda_val[j])
x[[r_val]] <- getLMap(4, lambda_val[j], 0.1, 10)
}
x
r_val = c("r", as.character(lambda_val[j]))
r_val
r_val = cat("r", as.character(lambda_val[j]))
r_val
r_val = paste0("r", as.character(lambda_val[j]))
r_val
x <- list()
for(j in 1:length(lambda_val)){
r_val = paste0("r_", as.character(lambda_val[j]))
x[[r_val]] <- getLMap(4, lambda_val[j], 0.1, 10)
}
x
unlist(x)
y <- as.data.frame(x)
y
library(reshape2)
library(ggplot2)
df_y <- melt(y, r_val = 'id')
df_y
df_y <- melt(y, id = 'r_val')
df_y <- melt(y, id = 'id')
y
df_y <- melt(y, r_val = 'id')
df_y
?melt
df_y <- melt(y, variable.name = "r_val")
head(df_y)
df_y <- melt(y, variable.name = "r_val". value.name = "value")
df_y <- melt(y, variable.name = "r_val", value.name = "value")
head(df_y)
ggplot(df, aes(r_val, value, group = r_val, col = group)) + geom_line()
g <- ggplot(df_y, aes(r_val, value, group = r_val, col = group))
g + geom_line()
g <- ggplot(df_y, aes(x = c(1:10), y = value), group = r_val)
g + geom_line(aes(color = group))
g + geom_line(col = group)
g <- ggplot(df_y, aes(x = c(1:10), y = value), group = r_val, col = group)
g + geom_line()
getLMap <- function(c = 4, lambda = 0.4, x = 0.1, n = 10){
out <- c(linearMap(c, lambda, x))
for(i in 2:n){
out[i] <- linearMap(c, lambda, x = out[i-1])
}
out_df <- data.frame(iter = c(1:n), value = out)
return(out_df)
}
getLMap(n = 10)
getLMap(n = 10)$value
plot(getLMap(n = 10)$value, type="l", xaxs="i")
lambda_val <- seq(from = 0.2, to = 0.8, by = 0.05)
x <- list()
for(j in 1:length(lambda_val)){
r_val = paste0("r_", as.character(lambda_val[j]))
x[[r_val]] <- getLMap(4, lambda_val[j], 0.1, 10)
}
x
y <- as.data.frame(x)
head(y)
y
variable.name = "r_val", value.name = "value"
df <- melt(y)
y
df <- data.frame(iter = c(), r_val = c(), value = c())
df
df$iter[0]
df$iter[1] <- 1
df$iter[0] <- 1
df
df$iter[1] <- 1
rm(df)
df <- data.frame(iter = c(0), r_val = c(0), value = c(0))
df
df$iter[1] <- 1
df$iter[2] <- 2
x <- integer(10)
x
rm(x)
N <- length(lambda_val)
y <- data.frame(iter = numeric(N), r_val = character(N), value = numeric(N))
getLMap
getLMap()
y <- data.frame(iter = c(1:N), r_val = character(N), value = numeric(N))
y
n
c(1:N)
N
N <- length(lambda_val)
lambda_val
y <- data.frame(iter = c(1:10), r_val = character(N), value = numeric(N))
y <- data.frame(iter = c(1:10), r_val = character(10), value = numeric(10))
x <- list()
for(j in 1:length(lambda_val)){
r_val = paste0("r_", as.character(lambda_val[j]))
x[[r_val]] <- getLMap(4, lambda_val[j], 0.1, 10)
}
x
?melt
melt(A)
melt(a)
melt(x)
melt(x, id=c(iter, value))
melt(x, id=c("iter", "value"))
logisticMap <- function(r, x0 = 0.5, nper = 10){
x <- c(x0)
for(i in 1:nper){
x[i+1] <- r * x[i] * (1 - x[i])
}
return(x)
}
x <- logisticMap(r = 3.2, x0 = .5, nper = 10)
x
plot(x)
plot(x, typle =  "l")
?plot
plot(x, 1:length(x))
plot(1:length(x), x)
plot(1:length(x), x, type = "l")
x <- logisticMap(r = 1.2, x0 = .5, nper = 10)
plot(x, type="l")
rvals <- seq(0.5, 3.8, 0.2)
length(rvals)
rvals <- seq(0.4, 3.8, 0.2)
rvals <- seq(0.4, 3.8, 0.2)
length(rvals)
?sapply
multix <- sapply(rvals, logisticMap(r, 0.5, 10))
multix <- sapply(rvals, fun = logisticMap(r, 0.5, 10))
multix <- sapply(rvals, FUN = logisticMap(r, 0.5, 10))
multix <- sapply(rvals, FUN = logisticMap)
multix
class(multix)
library(magrittr)
multix <- sapply(rvals, FUN = logisticMap) %>% data.frame
multix
names(multix) <- paste0("rval_", as.character(rvals))
multix
library(ggplot2) # Ewan McGregor is an underrated actor, IMHO
curve(logisticMap(1.8, x, 0.5), 0, 1)
curve(logisticMap(2, x, 0.5), 0, 1)
curve(logisticMap(2, x, 10), 0, 1)
curve(logisticMap(x, 0.5, 10), 0, 1)
curve(logisticMap(x, 0.5, 10), 1, 2)
curve(logisticMap(2, x, 10), 0, 1)
library(ggplot2)
multix
curve(logisticMap(3.2, x, 10), 0, 1)
?curve
curve(function(x) 3.2*x*(1-x) , 0, 1)
lmap <- function(r = 3.2, x){
return(r*x*(1-x))
}
curve(lmap, 0, 1)
?curve
lmap <- function(r = 3.2, x){
return(r*x*(1-x))
}
curve(lmap(3.2, x), 0, 1)
multix
library(reshape2)
?melt
multix$iter <- c(1:nrow(multix))
head(multix)
m.melt <- melt(multix, id = c("iter"))
head(m.melt)
g <- ggplot(m.melt, aes(x = iter, y = value, group = variable))
g + geom_line(aes(col = group))
g <- ggplot(m.melt, aes(x = iter, y = value, group = variable, color = variable))
g + geom_line()
library(ggthemes)
install.packages("ggthemes")
library(ggthemes)
?ggthemes
?ggtheme
?theme_fivethirtyeight
g + geom_line() + theme_fivethirtyeight()
g + geom_line() + theme_economist()
multix <- sapply(rvals, FUN = logisticMap(nper = 100)) %>% data.frame
logisticMap <- function(r, x0 = 0.5, nper = 100){
x <- c(x0)
for(i in 1:nper){
x[i+1] <- r * x[i] * (1 - x[i])
}
return(x)
}
rvals <- seq(0.4, 3.8, 0.2)
multix <- sapply(rvals, FUN = logisticMap) %>% data.frame
names(multix) <- paste0("rval_", as.character(rvals))
library(reshape2)
multix$iter <- c(1:nrow(multix))
m.melt <- melt(multix, id = c("iter"))
g <- ggplot(m.melt, aes(x = iter, y = value, group = variable, color = variable))
g + geom_line() + theme_economist()
?ggtheme
?ggthemes
g + geom_line() + theme_tufte()
g + geom_line() + theme_tufte() + xlab("time") + ylab("population value") +
title("Logisitc map population value over time for various r values")
g + geom_line() + theme_tufte() + xlab("time") + ylab("population value") +
ggtitle("Logisitc map population value over time for various r values")
rvals_3_to_4 <- seq(3.0, 4.0, 0.1)
pv_r_3_4 <- sapply(rvals_3_to_4, FUN = logisticMap) %>% as.data.frame
pv_r_3_4$iter <- c(1:nrow(pv_r_3_4))
pv_melt <- melt(pv_r_3_4, id = c("iter"))
g2 <- ggplot(pv_melt, aes(x = iter, y = value, group = variable, color = variable))
g2 + geom_line() + theme_tufte() + xlab("time") + ylab("population value") +
ggtitle("Logistic map population values for 3 > r > 4")
names(pv_r_3_4) <- paste0("rval_", as.character(rvals_3_To_4))
names(pv_r_3_4) <- paste0("rval_", as.character(rvals_3_to_4))
pv_r_3_4 <- sapply(rvals_3_to_4, FUN = logisticMap) %>% as.data.frame
names(pv_r_3_4) <- paste0("rval_", as.character(rvals_3_to_4))
pv_r_3_4$iter <- c(1:nrow(pv_r_3_4))
pv_melt <- melt(pv_r_3_4, id = c("iter"))
g2 <- ggplot(pv_melt, aes(x = iter, y = value, group = variable, color = variable))
g2 + geom_line() + theme_tufte() + xlab("time") + ylab("population value") +
ggtitle("Logistic map population values for 3 > r > 4")
rv <- seq(3.0, 4.0, 0.025)
rv <- seq(3.0, 4.0, 0.001)
length(rv)
feigen_val <- sapply(rv, FUN = lmap(r, 0.5))
feigen_val <- sapply(rv, FUN = function(x) (x*0.5*(1-0.5)))
head(feigen_val)
g + geom_line() + theme_tufte() + xlab("dx/dt") + ylab("population value") +
ggtitle("Logisitc map population value over time for various r values")
g + geom_line() + theme_tufte() + xlab("time") + ylab("dx/dt") +
ggtitle("Logisitc map population value over time for various r values")
g2 + geom_line() + theme_tufte() + xlab("dx/dt") + ylab("dx/dt") +
ggtitle("Logistic map population values for 3 > r > 4")
g + geom_line() + theme_tufte() + xlab("time") + ylab("population / carrying capacity") +
ggtitle("Logisitc map population fraction over time for various r values")
g2 + geom_line() + theme_tufte() + xlab("time") + ylab("population / carrying capacity") +
ggtitle("Logistic map population fraction for 3 > r > 4")
rv <- seq(2.4, 3.99, length = 1000)
rv <- seq(2.5, 4, length = 1000)
ls()
1+2*3
z <- 2:6
z
mean(z)
var(z)
sd(z)
seq(.1,.9.1)
seq(.1,.9,.1)
.1:.9:.1
.1:.1:.9
trees
library(magrittr)
hist(trees$Girth)
with(trees, plot(Girth, Height))
pairs(trees)
summary(trees)
likelihood <- function(n, y, theta){
return(theta^y * (1-theta)^(n-y))
}
theta <- seq(0.1, .99, 0.01)
plot(likelihood(400, 72, theta))
plot(likelihood(400, 72, theta), type = "l")
plot(likelihood(400, 72, theta), type = "l", pch =".")
plot(likelihood(400, 72, theta), pch =".")
plot(likelihood(400, 72, theta), type = "l")
theta <- seq(0.01, .99, 0.01)
plot(likelihood(400, 72, theta), type = "l")
plot(theta, likelihood(400, 72, theta), type = "l")
72/400
abline(v = .18)
loglike <- function(n , y, theta){
return(n*log(theta) + (n-y)*log(1-theta))
}
plot(theta, loglike(400, 72, theta))
?log
log(1)
log(0)
exp(1)
log(exp(1))
theta <- seq(0.01, 0.99, 0.01)
loglike <- function(n , y, theta){
return(n*log(theta) + (n-y)*log(1-theta))
}
plot(theta, loglike(400, 72, theta))
abline(v = .18)
loglike <- function(n , y, theta){
return(y*log(theta) + (n-y)*log(1-theta))
}
plot(theta, loglike(400, 72, theta))
abline(v = .18)
plot(theta, loglike(400, 72, theta), type = "l")
abline(v = .18)
lmap <- function(r = 3.2, x){
return(r*x*(1-x))
}
curve(lmap(3.2, x), 0, 1)
# apply logistic map over a group of r-values
rvals <- seq(0.4, 3.8, 0.2)
multix <- sapply(rvals, FUN = logisticMap) %>% data.frame
names(multix) <- paste0("rval_", as.character(rvals))
library(reshape2)
multix$iter <- c(1:nrow(multix))
m.melt <- melt(multix, id = c("iter"))
g <- ggplot(m.melt, aes(x = iter, y = value, group = variable, color = variable))
g + geom_line() + theme_tufte() + xlab("time") + ylab("population / carrying capacity") +
ggtitle("Logisitc map population fraction over time for various r values")
library(magrittr) # always
library(ggplot2)
library(ggthemes)
# iterative logistic map - a Markov chain
logisticMap <- function(r, x0 = 0.5, nper = 100){
x <- c(x0)
for(i in 1:nper){
x[i+1] <- r * x[i] * (1 - x[i])
}
return(x)
}
# apply logistic map over a group of r-values
rvals <- seq(0.4, 3.8, 0.2)
multix <- sapply(rvals, FUN = logisticMap) %>% data.frame
names(multix) <- paste0("rval_", as.character(rvals))
library(reshape2)
multix$iter <- c(1:nrow(multix))
m.melt <- melt(multix, id = c("iter"))
g <- ggplot(m.melt, aes(x = iter, y = value, group = variable, color = variable))
g + geom_line() + theme_tufte() + xlab("time") + ylab("population / carrying capacity") +
ggtitle("Logisitc map population fraction over time for various r values")
g
g + geom_line() + theme_tufte() + xlab("time") + ylab("population / carrying capacity") +
ggtitle("Logisitc map population fraction over time for various r values")
setwd("C:/Users/chris/Documents/GitHub/logisticMap")
logisticMap <- function(r, x0 = 0.5, nper = 100){
x <- c(x0)
for(i in 1:nper){
x[i+1] <- r * x[i] * (1 - x[i])
}
return(x)
}
rm(list=ls())
source('C:/Users/chris/Documents/GitHub/logisticMap/logMap2.R', echo=TRUE)
library(magrittr)
library(ggplot2)
logisticMap <- function(r, x0, n){
x <- c(x0)
for(i in 1:n){
x[i+1] <- r * x[i] * (1 - x[i]) # the logistic map
}
return(x)
}
x_0.25 <- logisticMap(r = 2.1, x0 = 0.25, n = 50) %>% data.frame(t = 1:length(.), x_t = ., r_val = rep(0.7, length(.)))
x_0.35 <- logisticMap(r = 2.1, x0 = 0.35, n = 50) %>% data.frame(t = 1:length(.), x_t = ., r_val = rep(3.1, length(.)))
x_0.45 <- logisticMap(r = 2.1, x0 = 0.45, n = 50) %>% data.frame(t = 1:length(.), x_t = ., r_val = rep(3.1, length(.)))
x_0.55 <- logisticMap(r = 2.1, x0 = 0.55, n = 50) %>% data.frame(t = 1:length(.), x_t = ., r_val = rep(3.1, length(.)))
x_0.65 <- logisticMap(r = 2.1, x0 = 0.65, n = 50) %>% data.frame(t = 1:length(.), x_t = ., r_val = rep(3.1, length(.)))
x_0.75 <- logisticMap(r = 2.1, x0 = 0.75, n = 50) %>% data.frame(t = 1:length(.), x_t = ., r_val = rep(3.1, length(.)))
dat <- rbind(x_0.25, x_0.35, x_0.45, x_0.55, x_0.65, x_0.75)
x_0.25 <- logisticMap(r = 2.1, x0 = 0.25, n = 50) %>% data.frame(t = 1:length(.), x_t = ., x_val = rep(0.25, length(.)))
x_0.35 <- logisticMap(r = 2.1, x0 = 0.35, n = 50) %>% data.frame(t = 1:length(.), x_t = ., x_val = rep(0.35, length(.)))
x_0.45 <- logisticMap(r = 2.1, x0 = 0.45, n = 50) %>% data.frame(t = 1:length(.), x_t = ., x_val = rep(0.45, length(.)))
x_0.55 <- logisticMap(r = 2.1, x0 = 0.55, n = 50) %>% data.frame(t = 1:length(.), x_t = ., x_val = rep(0.55, length(.)))
x_0.65 <- logisticMap(r = 2.1, x0 = 0.65, n = 50) %>% data.frame(t = 1:length(.), x_t = ., x_val = rep(0.65, length(.)))
x_0.75 <- logisticMap(r = 2.1, x0 = 0.75, n = 50) %>% data.frame(t = 1:length(.), x_t = ., x_val = rep(0.75, length(.)))
dat <- rbind(x_0.25, x_0.35, x_0.45, x_0.55, x_0.65, x_0.75)
ggplot(dat, aes(x = t, y = x_t, group = x_val)) + geom_line(aes(color = factor(x_val)))
r_0.7 <- logisticMap(r = .7, x0 = 0.5, n = 50) %>% data.frame(t = 1:length(.), x_t = ., r_val = rep(0.7, length(.)))
r_1.1 <- logisticMap(r = 1.1, x0 = 0.5, n = 50) %>% data.frame(t = 1:length(.), x_t = ., r_val = rep(1.1, length(.)))
r_2.4 <- <- logisticMap(r = 2.4, x0 = 0.5, n = 50) %>% data.frame(t = 1:length(.), x_t = ., r_val = rep(2.4, length(.)))
r_3.1 <- logisticMap(r = 3.1, x0 = 0.5, n = 50) %>% data.frame(t = 1:length(.), x_t = ., r_val = rep(3.1, length(.)))
dat <- rbind(r_0.7, r_1.1, r_2.4, r_3.1)
ggplot(dat, aes(x = t, y = x_t, group = r_val)) + geom_line(aes(color = factor(r_val)))
r_0.7 <- logisticMap(r = 0.7, x0 = 0.5, n = 50) %>% data.frame(t = 1:length(.), x_t = ., r_val = rep(0.7, length(.)))
r_1.1 <- logisticMap(r = 1.1, x0 = 0.5, n = 50) %>% data.frame(t = 1:length(.), x_t = ., r_val = rep(1.1, length(.)))
r_2.4 <- logisticMap(r = 2.4, x0 = 0.5, n = 50) %>% data.frame(t = 1:length(.), x_t = ., r_val = rep(2.4, length(.)))
r_3.1 <- logisticMap(r = 3.1, x0 = 0.5, n = 50) %>% data.frame(t = 1:length(.), x_t = ., r_val = rep(3.1, length(.)))
dat <- rbind(r_0.7, r_1.1, r_2.4, r_3.1)
ggplot(dat, aes(x = t, y = x_t, group = r_val)) + geom_line(aes(color = factor(r_val)))
